/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tp.licenseVehicle.model;

import com.mysql.jdbc.Connection;
import com.tp.licenseVehicle.tableClasses.VehicleDetailBean;
import com.tp.util.KrutiDevToUnicodeConverter;
import com.tp.util.UnicodeToKrutiDevConverter;
import java.io.ByteArrayOutputStream;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRXlsExporter;

/**
 *
 * @author JPSS
 */
public class VehicleDetailModel {

    private Connection connection;
    private String driverClass;
    private String connectionString;
    private String db_username;
    private String db_password;
    private String message;
    private String msgBgColor;
    private final String COLOR_OK = "yellow";
    private final String COLOR_ERROR = "red";
    private KrutiDevToUnicodeConverter krutiToUnicode = new KrutiDevToUnicodeConverter();
    private UnicodeToKrutiDevConverter unicodeToKruti = new UnicodeToKrutiDevConverter();

    public void setConnection() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = (Connection) DriverManager.getConnection(connectionString + "?useUnicode=true&characterEncoding=UTF-8&character_set_results=utf8", db_username, db_password);
            System.out.println("connected - " + connection);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public byte[] generateRecordList(String jrxmlFilePath, List list) {
        byte[] reportInbytes = null;
        HashMap mymap = new HashMap();
        try {
            JRBeanCollectionDataSource jrBean = new JRBeanCollectionDataSource(list);
            JasperReport compiledReport = JasperCompileManager.compileReport(jrxmlFilePath);
            reportInbytes = JasperRunManager.runReportToPdf(compiledReport, null, jrBean);
        } catch (Exception e) {
            System.out.println("VehicleDetailModel generatReport() JRException: " + e);
        }
        return reportInbytes;
    }
     public ByteArrayOutputStream generateVehicleXlsRecordList(String jrxmlFilePath,List list) {
                ByteArrayOutputStream bytArray = new ByteArrayOutputStream();
              //  HashMap mymap = new HashMap();
                try {
                    JRBeanCollectionDataSource jrBean=new JRBeanCollectionDataSource(list);
                    JasperReport compiledReport = JasperCompileManager.compileReport(jrxmlFilePath);
                    JasperPrint jasperPrint = JasperFillManager.fillReport(compiledReport, null, jrBean);
                    JRXlsExporter exporter = new JRXlsExporter();
                    exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                    exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, bytArray);
                    exporter.exportReport();
                } catch (Exception e) {
                    System.out.println("VehicleDetailModel generateVehicleXlsRecordList() JRException: " + e);
                }
                return bytArray;
            }
    
    public int insertRecord(VehicleDetailBean vehicleDetailBean) {
        int rowsAffected = 0;
        int vehicle_detail_id = vehicleDetailBean.getVehicle_detail_id();
        int vehicle_revision_no = vehicleDetailBean.getVehicle_revision_no();
        String query = "";
        if(vehicle_detail_id > 0)
            query = "INSERT INTO vehicle_detail (vehicle_no, model_id, engine_no, owner_name, owner_address, owner_contact_no, remark, vehicle_detail_id, vehicle_revision_no, "
                + " vehicle_no_state, vehicle_no_city_code, vehicle_no_series, vehicle_no_digits) "
                + " VALUES (?,?,?,?,?,?,?,"+ vehicle_detail_id +", "+ (vehicle_revision_no + 1) +",?,?,?,?) ";
        else
         query = "INSERT INTO vehicle_detail (vehicle_no, model_id, engine_no, owner_name, owner_address, owner_contact_no, remark, "
                 + " vehicle_no_state, vehicle_no_city_code, vehicle_no_series, vehicle_no_digits) "
                + " VALUES (?,?,?,?,?,?,?,?,?,?,?) ";
        try {
            PreparedStatement pstmt = connection.prepareStatement(query);

            String vehicle_no = vehicleDetailBean.getVehicle_no();
            pstmt.setString(1, vehicle_no);
            vehicle_no = checkVehicleNo(vehicle_no);
            pstmt.setInt(2, getModel_id(vehicleDetailBean.getModel()));
            pstmt.setString(3, vehicleDetailBean.getEngine_no());
            pstmt.setString(4, krutiToUnicode.convert_to_unicode(vehicleDetailBean.getOwner_name()));
            //pstmt.setInt(3, vehicleDetailBean.getOwner_age());
            pstmt.setString(5, krutiToUnicode.convert_to_unicode(vehicleDetailBean.getOwner_address()));
            pstmt.setString(6, vehicleDetailBean.getOwner_contact_no());
            pstmt.setString(7, krutiToUnicode.convert_to_unicode(vehicleDetailBean.getRemark()));
            String[] vehicleParts = vehicle_no.split("_");
            if(vehicleParts.length == 5){
                pstmt.setString(8, vehicleParts[1]);
                pstmt.setString(9, vehicleParts[2]);
                pstmt.setString(10, vehicleParts[3]);
                pstmt.setString(11, vehicleParts[4]);
            }else{
                pstmt.setNull(8, java.sql.Types.NULL);
                pstmt.setNull(9, java.sql.Types.NULL);
                pstmt.setNull(10, java.sql.Types.NULL);
                pstmt.setNull(11, java.sql.Types.NULL);
            }
            
            rowsAffected = pstmt.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error: insertRecord in VehicleDetailModel: " + e);
        }
        if (rowsAffected > 0) {

            message = "Record saved successfully......";
            msgBgColor = COLOR_OK;
            System.out.println("inserted");
        } else {
            message = "Record not saved Some Error! ";
            msgBgColor = COLOR_ERROR;

            System.out.println("not inserted");
        }
        return rowsAffected;
    }

    public int reviseRecord(VehicleDetailBean vehicleDetailBean) {
        int rowsAffected = 0;        
        try {

            rowsAffected = insertRecord(vehicleDetailBean);
            if(rowsAffected > 0)
                rowsAffected = cancelRecord(""+vehicleDetailBean.getVehicle_detail_id(), ""+vehicleDetailBean.getVehicle_revision_no());

        } catch (Exception e) {
            System.out.println("Error: RevisetRecord in VehicleDetailModel: " + e);
        }
        if (rowsAffected > 0) {
            message = "Record Revised successfully......";
            msgBgColor = COLOR_OK;
            System.out.println("revised");
        } else {
            message = "Record not Revised Some Error!";
            msgBgColor = COLOR_ERROR;

            System.out.println("not revised");
        }
        return rowsAffected;
    }
  
    public List<VehicleDetailBean> showData(int lowerLimit, int noOfRowsToDisplay, String searchOfficeCode, String searchOfficeName, String searchVehicleNo, String searchFromDate, String searchToDate) {
        List<VehicleDetailBean> list = new ArrayList<VehicleDetailBean>();
        if (!searchFromDate.equals("")) {
            String da1[] = searchFromDate.split("-");
            String da2[] = searchToDate.split("-");
            searchFromDate = da1[2] + "-" + da1[1] + "-" + da1[0];
            searchToDate = da2[2] + "-" + da2[1] + "-" + da2[0];
            System.out.println(searchFromDate);
            System.out.println(searchToDate);
        }

        String query = "SELECT vd.vehicle_detail_id, vd.vehicle_revision_no, vd.vehicle_no, m.model, vd.engine_no, vd.owner_name, "
                + " vd.owner_address, vd.owner_contact_no, vd.remark, vd.active "
                + " FROM vehicle_detail vd, model m "
                + " WHERE m.model_id=vd.model_id AND vd.active='Y' "
                + " AND IF('"+ searchVehicleNo +"'='', vd.vehicle_no LIKE '%%', vd.vehicle_no = '" + searchVehicleNo + "') "                
                + " LIMIT " + lowerLimit + ", " + noOfRowsToDisplay;

        try {
            PreparedStatement pstmt = connection.prepareStatement(query);          

            ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                VehicleDetailBean vehicleDetailBean = new VehicleDetailBean();
                vehicleDetailBean.setVehicle_detail_id(rset.getInt("vehicle_detail_id"));
                vehicleDetailBean.setVehicle_revision_no(rset.getInt("vehicle_revision_no"));
                vehicleDetailBean.setVehicle_no(rset.getString("vehicle_no"));
                vehicleDetailBean.setModel(rset.getString("model"));
                vehicleDetailBean.setEngine_no(rset.getString("engine_no"));
                vehicleDetailBean.setOwner_name(unicodeToKruti.Convert_to_Kritidev_010(rset.getString("owner_name")));
                vehicleDetailBean.setOwner_address(unicodeToKruti.Convert_to_Kritidev_010(rset.getString("owner_address")));
                vehicleDetailBean.setOwner_contact_no(rset.getString("owner_contact_no"));
                vehicleDetailBean.setRemark(unicodeToKruti.Convert_to_Kritidev_010(rset.getString("remark")));
                vehicleDetailBean.setActive(rset.getString("active"));
                list.add(vehicleDetailBean);
            }
        } catch (Exception e) {
            System.out.println("Error in ShowData()....: " + e);
        }
        return list;
    }

    public List<VehicleDetailBean> showAllData(String searchVehicleNo) {
        List<VehicleDetailBean> list = new ArrayList<VehicleDetailBean>();        
        String query = "SELECT vd.vehicle_detail_id, vd.vehicle_revision_no, vd.vehicle_no, m.model, vd.engine_no, vd.owner_name, "
                + " vd.owner_address, vd.owner_contact_no, vd.remark, vd.active "
                + " FROM vehicle_detail vd, model m "                 
                + " WHERE  m.model_id=vd.model_id AND vd.active='Y'"
                + " AND IF('"+ searchVehicleNo +"'='', vd.vehicle_no LIKE '%%', vd.vehicle_no = '" + searchVehicleNo + "') ";
                    
        try {
            PreparedStatement pstmt = connection.prepareStatement(query);

            ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                VehicleDetailBean vehicleDetailBean = new VehicleDetailBean();
                vehicleDetailBean.setVehicle_detail_id(rset.getInt("vehicle_detail_id"));
                vehicleDetailBean.setVehicle_revision_no(rset.getInt("vehicle_revision_no"));
                vehicleDetailBean.setVehicle_no(rset.getString("vehicle_no"));
                vehicleDetailBean.setModel(rset.getString("model"));
                vehicleDetailBean.setEngine_no(rset.getString("engine_no"));
                vehicleDetailBean.setOwner_name(rset.getString("owner_name"));
                vehicleDetailBean.setOwner_address(rset.getString("owner_address"));
                vehicleDetailBean.setOwner_contact_no(rset.getString("owner_contact_no"));
                vehicleDetailBean.setRemark(rset.getString("remark"));
                vehicleDetailBean.setActive(rset.getString("active"));
                list.add(vehicleDetailBean);
            }
        } catch (Exception e) {
            System.out.println("Error in ShowData()....: " + e);
        }
        return list;
    }

    public int getNoOfRows(String searchOfficeName,String searchOfficeCode, String searchVehicleNo,  String searchFromDate, String searchToDate) {
        int noOfRows = 0;
        try {
            if (!searchFromDate.equals("")) {
                String da1[] = searchFromDate.split("-");
                String da2[] = searchToDate.split("-");
                searchFromDate = da1[2] + "-" + da1[1] + "-" + da1[0];
                searchToDate = da2[2] + "-" + da2[1] + "-" + da2[0];
                System.out.println(searchFromDate);
                System.out.println(searchToDate);


            }
           
            String query = "SELECT count(vd.vehicle_detail_id) FROM vehicle_detail vd, model m "
                    + "WHERE m.model_id=vd.model_id AND vd.active='Y'"
                    + " AND IF('"+ searchVehicleNo +"'='', vd.vehicle_no LIKE '%%', vd.vehicle_no = '" + searchVehicleNo + "') ";

            PreparedStatement stmt = connection.prepareStatement(query);           

            ResultSet rs = stmt.executeQuery();
            rs.next();
            noOfRows = Integer.parseInt(rs.getString(1));
        } catch (Exception e) {
            System.out.println("Error inside getNoOfRows in VehicleDetailModel " + e);
        }
        System.out.println("No of Rows in Table for search is****....." + noOfRows);
        return noOfRows;
    }

    public java.sql.Date convertToSqlDate(String date) throws ParseException {
        java.sql.Date finalDate = null;
        String strD = date;
        String[] str1 = strD.split("-");
        strD = str1[1] + "/" + str1[0] + "/" + str1[2]; // Format: mm/dd/yy
        finalDate = new java.sql.Date(DateFormat.getDateInstance(DateFormat.SHORT, new Locale("en", "US")).parse(strD).getTime());
        return finalDate;
    }

    public int cancelRecord(String vehicle_detail_id, String revision) {
        String query = "Update vehicle_detail SET active='N' WHERE vehicle_detail_id=" + vehicle_detail_id +" AND vehicle_revision_no=" + revision;
        int rowsAffected = 0;
        try {
            rowsAffected = connection.prepareStatement(query).executeUpdate();
        } catch (Exception e) {
            System.out.println("Error:VehicleDetailModel-cancelRecord-- " + e);
        }
        if (rowsAffected > 0) {
            message = "Record Canceled successfully.";
            msgBgColor = COLOR_OK;
        } else {
            message = "Cannot Canceled the record, some error.";
            msgBgColor = COLOR_ERROR;
        }
        return rowsAffected;
    }

    public int getModel_id(String model) {
        int model_id = 0;
        try {

            String query = "Select model_id from model where model='" + model + "'  ";

            PreparedStatement pstmt = connection.prepareStatement(query);
            ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                model_id = rset.getInt("model_id");

            }
        } catch (Exception e) {
        }
        return model_id;
    }

    public Map<Integer, String> getVehicleTypeList() {
        Map<Integer, String> vehicleList = new HashMap<Integer, String>();
        try {
            String query = "Select vehicle_type_id, vehicle_type from vehicle_type";
            PreparedStatement pstmt = connection.prepareStatement(query);
            ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                int vehicle_id = rset.getInt("vehicle_type_id");
                String vehicle_type = rset.getString("vehicle_type");
                vehicleList.put(vehicle_id, vehicle_type);
            }
        } catch (Exception e) {
        }
        return vehicleList;
    }

    public List<String> getVehicleNoList(String q){
        List<String> list = new ArrayList<String>();
        String query = "SELECT vehicle_no FROM vehicle_detail WHERE active='Y'";
        int count = 0;
        try{
            q = q.trim();
            ResultSet rs = connection.prepareStatement(query).executeQuery();
            while(rs.next()){
                String vehicle_no = rs.getString("vehicle_no");
                if(vehicle_no.toUpperCase().startsWith(q.toUpperCase())){
                    list.add(vehicle_no);
                    count++;
                }
            }
            if(count == 0)
                list.add("Vehicle No. not found");
        }catch(Exception ex){
        }
        return list;
    }

    public List<String> getModelList(String q){
        List<String> list = new ArrayList<String>();
        String query = "SELECT model FROM model ";// WHERE active='Y'";
        int count = 0;
        try{
            q = q.trim();
            ResultSet rs = connection.prepareStatement(query).executeQuery();
            while(rs.next()){
                String model = rs.getString("model");
                if(model.toUpperCase().startsWith(q.toUpperCase())){
                    list.add(model);
                    count++;
                }
            }
            if(count == 0)
                list.add("No Modle found");
        }catch(Exception ex){
        }
        return list;
    }

    public String checkVehicleNo(String vehicle_no){
       List<String> results = new ArrayList<String>();
       String finalResult = "";
       String vehicleNo = "";
       String tempVehicleNo = vehicle_no;
       String searchVehicleNo = "";
       String[] splitArray ;
       String tempstr = "";
       Pattern pattern1 = Pattern.compile("[A-Z]{2}[ -][0-9]{1,2}(?: [A-Z])?(?: [A-Z]*)? [0-9]{4}$");
       Pattern pattern2 = Pattern.compile("[a-z]{2}[ -][0-9]{1,2}(?: [a-z])?(?: [a-z]*)? [0-9]{4}$");
       Pattern pattern3 = Pattern.compile("[a-z]{2}[0-9]{1,2}(?:[a-z])?(?:[a-z]*)?[0-9]{4}$");
       Pattern pattern4 = Pattern.compile("[A-Z]{2}[0-9]{1,2}(?:[A-Z])?(?:[A-Z]*)?[0-9]{4}$");

       Pattern p1, p2, p3, p4, p4_1, p5, p5_1, p6;
       try{
       p1 = Pattern.compile("[A-Z]{2}");
       p2 = Pattern.compile("[a-z]{2}");
       p3 = Pattern.compile("[0-9]{1,2}");
       p4 = Pattern.compile("(?:[a-z])?(?:[a-z]*)?");
       p4_1 = Pattern.compile("(?: [a-z])?(?: [a-z]*)?");
       p5 = Pattern.compile("(?:[A-Z])?(?:[A-Z]*)?");
       p5_1 = Pattern.compile("(?: [A-Z])?(?: [A-Z]*)?");
       p6 = Pattern.compile("\\d+");
       Matcher m1 = p1.matcher(tempVehicleNo);
       if(m1.find())
           searchVehicleNo = m1.group();
       if(searchVehicleNo.isEmpty() || !tempVehicleNo.startsWith(searchVehicleNo)){
           m1 = p2.matcher(tempVehicleNo);
           if(m1.find())
               searchVehicleNo = m1.group();
       }

       if(searchVehicleNo.isEmpty())
           finalResult = finalResult+ "" + "_zz";
       else{
           finalResult = finalResult + "_" + searchVehicleNo;
           tempstr = searchVehicleNo;
           splitArray = tempVehicleNo.split(searchVehicleNo);
           if(splitArray.length <= 1){
               finalResult = finalResult + "_00_zz_0000";
               return finalResult;
           }else
               tempVehicleNo = tempVehicleNo.split(searchVehicleNo)[1];
        }

       searchVehicleNo = "";
       m1 = p3.matcher(tempVehicleNo);
       if(m1.find())
           searchVehicleNo = m1.group();

       if(searchVehicleNo.isEmpty())
           finalResult = finalResult + "_" + 00;
       else{
           finalResult = finalResult + "_" + searchVehicleNo;
           splitArray = tempVehicleNo.split(searchVehicleNo);
           if(splitArray.length <= 1){
               finalResult = finalResult + "_zz_0000";
               return finalResult;
           }else
               tempVehicleNo = tempVehicleNo.split(searchVehicleNo)[1];
        }
       
       searchVehicleNo = "";
       m1 = p6.matcher(tempVehicleNo);
       while(m1.find())
           searchVehicleNo = m1.group();

       if(searchVehicleNo.isEmpty()){
           if(tempVehicleNo.isEmpty())
               finalResult = finalResult + "_zz_" + 0000;
           else
               finalResult = finalResult + "_" + tempVehicleNo.trim() + "_" + 0000;
           return finalResult;
           }
       else{
           tempVehicleNo = tempVehicleNo.split(searchVehicleNo)[0].trim();
           if(tempVehicleNo.isEmpty())
               finalResult = finalResult + "_" + "zz";
           else{
               String[] str = tempVehicleNo.split("-");
               int strLen = str.length;
               for(int i = 0; i < strLen; i++ )
                   if(!str[i].isEmpty())
                       tempVehicleNo = str[i];
               finalResult = finalResult + "_" + tempVehicleNo.trim();
           }
           int length = searchVehicleNo.length();
           if(length < 4){
               for(int i = length; i < 4; i++ )
                   searchVehicleNo = 0 + searchVehicleNo;
           }
           finalResult = finalResult + "_" + searchVehicleNo;
        }
        } catch (Exception ex) {
            System.out.println("ERROR: in checkVehicleNo() in VehicleDetailModel : " + ex);
        }
       return finalResult;
   }

    public String checkVehicleNo1(String vehicle_no){
       List<String> results = new ArrayList<String>();
       String finalResult = "";
       String vehicleNo = "";
       String searchVehicleNo = vehicle_no;
       Pattern pattern1 = Pattern.compile("[A-Z]{2}[ -][0-9]{1,2}(?: [A-Z])?(?: [A-Z]*)? [0-9]{4}$");
       Pattern pattern2 = Pattern.compile("[a-z]{2}[ -][0-9]{1,2}(?: [a-z])?(?: [a-z]*)? [0-9]{4}$");
       Pattern pattern3 = Pattern.compile("[a-z]{2}[0-9]{1,2}(?:[a-z])?(?:[a-z]*)?[0-9]{4}$");
       Pattern pattern4 = Pattern.compile("[A-Z]{2}[0-9]{1,2}(?:[A-Z])?(?:[A-Z]*)?[0-9]{4}$");
       //String pat3 = "/^[a-z]{2}[0-9]{1,2}(?:[a-z])?(?:[a-z]*)?[0-9]{4}$/";
       Pattern subPattern = null;
       Pattern subPattern1 = null;
       Pattern subPattern2 = Pattern.compile("[0-9]{1,2}");
       Pattern subPattern3 = null;
       Pattern subPattern4 = Pattern.compile("[0-9]{4}");
       Matcher match = pattern3.matcher(vehicle_no);
       if(!match.find()){
           match = pattern4.matcher(vehicle_no);
           if(!match.find()){
               match = pattern1.matcher(vehicle_no);
               if(!match.find()){
                   match = pattern2.matcher(vehicle_no);
                   if(!match.find()){

                   }else{
                       vehicleNo = match.group();
                       subPattern = Pattern.compile("(?: [a-z])?(?: [a-z]*)? [0-9]{4}");
                       subPattern1 = Pattern.compile("[a-z]{2}");
                       //subPattern2 = Pattern.compile("[0-9]{1,2}");
                       subPattern3 = Pattern.compile("(?:[a-z])?(?:[a-z]*)?");
                       //subPattern4 = Pattern.compile("[0-9]{4}");
                   }
               }else{
                   vehicleNo = match.group();
                   subPattern = Pattern.compile("(?: [A-Z])?(?: [A-Z]*)? [0-9]{4}");
                   subPattern1 = Pattern.compile("[A-Z]{2}");
                   //subPattern2 = Pattern.compile("[0-9]{1,2}");
                   subPattern3 = Pattern.compile("(?:[A-Z])?(?:[A-Z]*)?");
                   //subPattern4 = Pattern.compile("[0-9]{4}");
               }
           }else{
               vehicleNo = match.group();
               subPattern = Pattern.compile("(?:[A-Z])?(?:[A-Z]*)?[0-9]{4}");
               subPattern1 = Pattern.compile("[A-Z]{2}");
               //subPattern2 = Pattern.compile("[0-9]{1,2}");
               subPattern3 = Pattern.compile("(?:[A-Z])?(?:[A-Z]*)?");
               //subPattern4 = Pattern.compile("[0-9]{4}");
           }
       }else{
           vehicleNo = match.group();
           subPattern = Pattern.compile("(?:[a-z])?(?:[a-z]*)?[0-9]{4}");
           subPattern1 = Pattern.compile("[a-z]{2}");
           //subPattern2 = Pattern.compile("[0-9]{1,2}");
           subPattern3 = Pattern.compile("(?:[a-z])?(?:[a-z]*)?");
           //subPattern4 = Pattern.compile("[0-9]{4}");
           results.add(vehicleNo);
        }
       if(!vehicleNo.isEmpty()){
       match = subPattern1.matcher(vehicleNo);
       if(match.find())
           finalResult = finalResult + "_" + match.group();
       match = subPattern2.matcher(vehicleNo);
       if(match.find())
           finalResult = finalResult + "_" + match.group();
       match = subPattern.matcher(vehicleNo);
       if(match.find())
           vehicleNo = match.group();
       match = subPattern3.matcher(vehicleNo.trim());
       if(match.find())
           finalResult = finalResult + "_" + match.group();
       match = subPattern4.matcher(vehicleNo);
       if(match.find())
           finalResult = finalResult + "_" + match.group();
        }
       return finalResult;
   }

    public void closeConnection() {
        try {
            connection.close();
        } catch (Exception e) {
            System.out.println("VehicleDetailModel closeConnection() Error: " + e);
        }
    }

    public Connection getConnection() {
        return connection;
    }

    public String getConnectionString() {
        return connectionString;
    }

    public void setConnectionString(String connectionString) {
        this.connectionString = connectionString;
    }

    public String getDb_password() {
        return db_password;
    }

    public void setDb_password(String db_password) {
        this.db_password = db_password;
    }

    public String getDb_username() {
        return db_username;
    }

    public void setDb_username(String db_username) {
        this.db_username = db_username;
    }

    public String getDriverClass() {
        return driverClass;
    }

    public void setDriverClass(String driverClass) {
        this.driverClass = driverClass;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getMsgBgColor() {
        return msgBgColor;
    }

    public void setMsgBgColor(String msgBgColor) {
        this.msgBgColor = msgBgColor;
    }
}
