/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.tp.general.model;

import com.tp.general.tableClasses.ReceiptBookBean;
import com.tp.general.tableClasses.TrafficPoliceSearchBean;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import net.sf.json.JSONObject;
import org.apache.commons.fileupload.FileItem;

/**
 *
 * @author jpss
 */
public class ReceiptBookModel {
    private Connection connection;
    private String driverClass;
    private String connectionString;
    private String db_userName;
    private String db_password;
    private String message;
    private String msgBgColor;
    private final String COLOR_OK = "lightyellow";
    private final String COLOR_ERROR = "red";
    private String msg;

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public void setConnection() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = (Connection) DriverManager.getConnection(connectionString + "?useUnicode=true&characterEncoding=UTF-8&character_set_results=utf8", db_userName, db_password);
            System.out.println("connected - " + connection);
        } catch (Exception e) {
            System.out.println(e);
        }
    }
 public int insertRecord(ReceiptBookBean receiptBookBean) {
        int rowsAffected = 0;        
        String query = "INSERT INTO receipt_book (receipt_book_no, page_no, book_revision, amount)"
                + " VALUES(?, ?, ?, ?)";
        String insert_query = "INSERT INTO trafficpolice_receipt_map(traffic_police_id, receipt_book_id)"
                + "VALUES(?, ?)";
        int count = 0;
        int length = 0;
        try {
            //connection.setAutoCommit(false);
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setInt(1, receiptBookBean.getReceipt_book_no());
            pstmt.setInt(2, receiptBookBean.getPage_no());
            pstmt.setInt(3, receiptBookBean.getReceipt_book_revision());
            pstmt.setDouble(4, receiptBookBean.getAmount());
        
            rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                length = receiptBookBean.getChallan_book().length;
                int receiptBookId = getReceiptBookId();
                for(int i = 0; i < length; i++){                 
                    PreparedStatement pstmt1 = connection.prepareStatement(insert_query);
                    String[] tp = receiptBookBean.getChallan_book()[i].split("_");
                    pstmt1.setInt(1, Integer.parseInt(tp[2]));
                    pstmt1.setInt(2, receiptBookId);
                    rowsAffected = pstmt1.executeUpdate();
                    count++;
                }
            }
        } catch (Exception e) {
            System.out.println("Error: vehicle inserting: " + e);
        }
        if (rowsAffected > 0) {
            System.out.println("inserted");
            message = "Record is saved";
            msgBgColor = COLOR_OK;
        } else {
            System.out.println("not inserted");
            message = "Cannot save the record, some error.";
            msgBgColor = COLOR_ERROR;
        }
        if(count != 0 && count <= length);
        else{
            System.out.println("not inserted");
            message = "Cannot save the record, no offence found";
            msgBgColor = COLOR_ERROR;
        }        
        return rowsAffected;
    }

 public int insertImageRecord(String image_name, String date_time){
     int rowAffacted = 0;
     String query = "INSERT INTO general_image_details (image_name, image_destination_id, date_time, description) VALUES(?,2,?,'this image is for site')";
     try{
         PreparedStatement pst = connection.prepareStatement(query);
         pst.setString(1, image_name);
         pst.setString(2, date_time);
         rowAffacted = pst.executeUpdate();
     }catch(Exception ex){
         System.out.println("ERROR: in insertImageRecord() in TrafficPoliceSearchModel " + ex);
     }
     return rowAffacted;
 }

 public int uploadImage(String image_name, String date_time, FileItem image_file, int traffic_police_id, String fileExt){
     int rowAffacted = 0;
     String img_name = "";
     //String query = "INSERT INTO general_image_details (image_name, image_destination_id, date_time) VALUES(?,2,?)";
      Date dt = new Date();
     //Date time_stamp_date = new Date(timestamp);\
     DateFormat dateFormat = new SimpleDateFormat("dd.MMMMM.yyyy/ hh:mm:ss aaa");
     String datet = dateFormat.format(dt);
     if(date_time == null || date_time.isEmpty())
         date_time = dateFormat.format(dt);

     try{
         String destination_path = getDestinationPath("traffic_police");
         String[] date = date_time.split("\\.");
         img_name = date[0] + "-" + date[1] + "-" + date[2].split("/")[0] + "_" + "tp_" + traffic_police_id + fileExt;
         destination_path = destination_path + date[2].split("/")[0] + "/" + date[1] + "/" + date[0];
         File ft = new File(destination_path);
         boolean directories = false;
         if(!ft.exists())
            directories = ft.mkdirs();
         else
             directories = true;
         if(directories == true){
             destination_path = destination_path + "/" + img_name;
             ft = new File(destination_path);
             image_file.write(ft);
             rowAffacted = insertImageRecord(img_name, date_time);
         }
     }catch(Exception ex){
         System.out.println("ERROR: in uploadImage() in TrafficPoliceSearchModel " + ex);
     }     
     return rowAffacted;
 }

 public String getImagePath(int traffic_police_id){
     String img_name = "";
     String destination_path = "";
     String query = "SELECT image_name, destination_path FROM general_image_details gid, traffic_police tp, image_destination dp "
             + " WHERE dp.image_destination_id=gid.image_destination_id "
             + " AND gid.general_image_details_id = tp.general_image_details_id "
             + " AND tp.traffic_police_id = " + traffic_police_id;
     try{
         ResultSet rs = connection.prepareStatement(query).executeQuery();
         if(rs.next()){
             img_name = rs.getString("image_name");
             destination_path = rs.getString("destination_path");
         }
         String[] img_path = img_name.split("-");
         destination_path = destination_path + img_path[2].split("_")[0] + "/" + img_path[1] + "/" + img_path[0] + "/" + img_name;
     }catch(Exception ex){
         System.out.println("ERROR: in getImageName in TrafficPoliceSearchModel : " + ex);
     }
     return destination_path;
 }

 /*public int getGeneralImageDetailId(String image_name, String date_time){
     int rowAffacted = 0;
     String query = "INSERT INTO general_image_details (image_name, image_destination_id, date_time) VALUES(?,2,?)";
     try{
         PreparedStatement pst = connection.prepareStatement(query);
         pst.setString(1, image_name);
         pst.setString(2, date_time);
     }catch(Exception ex){
         System.out.println("ERROR: in insertImageRecord() in TrafficPoliceSearchModel " + ex);
     }
     return rowAffacted;
 }*/

 public String getDestinationPath(String image_uploaded_for){
     String destination_path = "";
     String query = " SELECT destination_path FROM image_destination id, image_uploaded_for  iuf "
             + " WHERE id.image_uploaded_for_id = iuf.image_uploaded_for_id "
             + " AND iuf.image_uploaded_for = '" + image_uploaded_for + "' ";//traffic_police
     try{
         ResultSet rs = connection.prepareStatement(query).executeQuery();
         if(rs.next())
             destination_path = rs.getString("destination_path");
     }catch(Exception ex){
         System.out.println("ERROR: in getTrafficPoliceId in TraffiPoliceSearchModel : " + ex);
     }
     return destination_path;
 }

 public int getgeneral_image_details_id(String date_time) {
        String query;
        int general_image_details_id = 0;
        //query = "select general_image_details_id from general_image_details where key_person_id='" + id + "' ";
        query = "select general_image_details_id from general_image_details where date_time='" + date_time + "' ";
        try {
            PreparedStatement pstmt = connection.prepareStatement(query);

            ResultSet rset = pstmt.executeQuery();
            if (rset.next()) {

                general_image_details_id = rset.getInt("general_image_details_id");
            }
        } catch (Exception ex) {
            System.out.println("Error: TrafficPoliceSearchModel-getgeneral_image_details_id- " + ex);
        }
        return general_image_details_id;
    }

 public String getJarayamNo(){
     String jarayam_no = "";
     int no = 0;
     String query = "SELECT jarayam_no FROM traffic_police WHERE jarayam_no LIKE '%mob%' ORDER BY traffic_police_id DESC";//is_from_mobile='Y' AND is_updated='N'
     try{
         ResultSet rs = connection.prepareStatement(query).executeQuery();
         if(rs.next()){
             jarayam_no = rs.getString("jarayam_no");
         }
         if(!jarayam_no.isEmpty()){
             String[] jarayam_array = jarayam_no.split("_");
             jarayam_no = jarayam_array[1];
             if(!jarayam_no.isEmpty())
                 no = Integer.parseInt(jarayam_no);
             jarayam_no = "mob_" + (no+1);
         }
         else
             jarayam_no = "mov_" + 1;
     }catch(Exception ex){
         System.out.println("Error: in getJarayamNo " + ex );
     }
     return jarayam_no;
 }

 public int getReceiptBookId() {
        int receipt_book_id = 0;
        try {
            String query = "SELECT MAX(receipt_book_id) as rb_id from receipt_book ";
            PreparedStatement pstmt = connection.prepareStatement(query);
            ResultSet rset = pstmt.executeQuery();
            if (rset.next())
                receipt_book_id = rset.getInt("rb_id"); 
        } catch (Exception e) {
            System.out.println("Error: in getReceiptBookId of ReceiptBookModel" + e);
        }
        return receipt_book_id;
    }

 public String getOfficerBookNo(String officer_name_selected) {//, String book_no
        String officer_book_no = "";
        try {

            String query = "SELECT ob.book_no from officer_book AS ob,key_person as kp "
                    + "Where ob.key_person_id=kp.key_person_id"
                    //+ "AND ob.book_no=?"
                    + "AND IF('" + officer_name_selected + "'='', kp.key_person_name LIKE '%%', kp.key_person_name= ?) ";

            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, officer_name_selected);
            //pstmt.setString(2, book_no);

            ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                officer_book_no = rset.getString("book_no");

            }
        } catch (Exception e) {
        }
        return officer_book_no;
    }

    public int getNoOfRows(String searchReceiptBookNo, String searchPageNo) {
        int noOfRows = 0;
        try {
            String query = "SELECT COUNT(receipt_book_id) FROM (SELECT rb.receipt_book_id FROM receipt_book AS rb "
                    + " INNER JOIN trafficpolice_receipt_map AS trm ON trm.receipt_book_id = rb.receipt_book_id "
                    + " INNER JOIN  traffic_police AS tp ON tp.traffic_police_id = trm.traffic_police_id "
                    + " WHERE IF('"+searchReceiptBookNo+"'='', rb.receipt_book_no LIKE '%%', rb.receipt_book_no = '"+searchReceiptBookNo+"') "
                    + " AND IF('"+searchPageNo+"'='', rb.page_no LIKE '%%', rb.page_no = '"+searchPageNo+"') GROUP BY rb.receipt_book_id) AS noOfRows ";
           PreparedStatement pstmt = connection.prepareStatement(query); 
            ResultSet rset = pstmt.executeQuery();
            rset.next();
            noOfRows = Integer.parseInt(rset.getString(1));
        } catch (Exception e) {
            System.out.println("Error:keypersonModel-getNoOfRows-- " + e);
        }
        return noOfRows;
    }

    public List<ReceiptBookBean> showData(int lowerLimit, int noOfRowsToDisplay, String searchReceiptBookNo, String searchPageNo) {
        List<ReceiptBookBean> list = new ArrayList<ReceiptBookBean>();        
        int temp_receipt_book_id = 0;
        String query;
        try {
            query = "SELECT rb.receipt_book_id, rb.receipt_book_no, rb.book_revision, rb.page_no, rb.amount, tp.book_no, tp.reciept_no, tp.deposited_amount "
                    + " FROM receipt_book AS rb INNER JOIN trafficpolice_receipt_map AS trm ON trm.receipt_book_id = rb.receipt_book_id "
                    + " INNER JOIN  traffic_police AS tp ON tp.traffic_police_id = trm.traffic_police_id "
                    + " WHERE IF('"+searchReceiptBookNo+"'='', rb.receipt_book_no LIKE '%%', rb.receipt_book_no = '"+searchReceiptBookNo+"') "
                    + " AND IF('"+searchPageNo+"'='', rb.page_no LIKE '%%', rb.page_no = '"+searchPageNo+"') GROUP BY rb.receipt_book_id "
                    + " LIMIT "+ lowerLimit + ", " + noOfRowsToDisplay;
            PreparedStatement pstmt = connection.prepareStatement(query);            
            ResultSet rset = pstmt.executeQuery();
            ReceiptBookBean receiptBookBean = new ReceiptBookBean();
            while (rset.next()) {
                ReceiptBookBean innerReceiptBookBean = new ReceiptBookBean();
                int receipt_book_id = rset.getInt("receipt_book_id");
                receiptBookBean.setReceipt_book_id(receipt_book_id);
                receiptBookBean.setReceipt_book_no(rset.getInt("receipt_book_no"));
                receiptBookBean.setReceipt_book_revision(rset.getInt("book_revision"));
                receiptBookBean.setPage_no(rset.getInt("page_no"));
                receiptBookBean.setReceiptBookRecords(getReceiptRecord(receipt_book_id));
                list.add(receiptBookBean);
            }
        } catch (Exception e) {
            System.out.println("Error:keypersonModel--showData " + e);
        }
        return list;
    }

    public List<ReceiptBookBean> getReceiptRecord(int receipt_book_id){
        List<ReceiptBookBean> list = new ArrayList<ReceiptBookBean>();
        String query = "SELECT tp.book_no, tp.reciept_no, tp.deposited_amount "
                    + " FROM receipt_book AS rb INNER JOIN trafficpolice_receipt_map AS trm ON trm.receipt_book_id = rb.receipt_book_id "
                    + " INNER JOIN  traffic_police AS tp ON tp.traffic_police_id = trm.traffic_police_id "
                    + " WHERE rb.receipt_book_id = " + receipt_book_id;
        try{
            ResultSet rs = connection.prepareStatement(query).executeQuery();
            while(rs.next()){
                ReceiptBookBean rbBean = new ReceiptBookBean();
                rbBean.setChallan_book_no(rs.getInt("book_no"));
                rbBean.setChallan_no(rs.getInt("reciept_no"));
                rbBean.setAmount(rs.getDouble("deposited_amount"));
                list.add(rbBean);
            }
        }catch(Exception ex){
            System.out.println("ERROR: in getReceiptRecord() in ReceiptBookModel : " + ex);
        }
        return list;
    }

    public List<String> getOffenderLicenseNoSearchList(String q){
        List<String> list = new ArrayList<String>();
        String query = "SELECT  offender_license_no from traffic_police "
                + " WHERE offender_license_no is not null"
                + " GROUP BY offender_license_no"
                + " ORDER BY offender_license_no ";
        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            // pstmt.setString(1,vehicle_type);

            ResultSet rs = pstmt.executeQuery();
            int count = 0;
            q = q.trim();
            while (rs.next()) {
                String offender_license_no = rs.getString("offender_license_no");
                if (offender_license_no.toUpperCase().startsWith(q.toUpperCase())) {
                    list.add(offender_license_no);
                    count++;
                }
                //list.add(vehicle_no);
                //count++;
            }

            if (count == 0) {
                //list.add("No Offender License Number is exist");
            }
        } catch (Exception e) {
            System.out.println(" getOffenderLicenseNoSearchList ERROR inside TrafficPoliceSearchModel - " + e);
        }

        return list;
    }

    public List<String> getOfficerNameList(String q) {

        List<String> officer_name_list = new ArrayList<String>();
        int count = 0;
        try {
//            String query = " select ob.book_no ,kp.key_person_name from officer_book as ob,key_person as kp "
//                    + "WHERE kp.key_person_id=ob.key_person_id";
            String query = "select ob.book_no ,kp.key_person_name from officer_book as ob,key_person as kp, status_type as st "
                    + " WHERE kp.key_person_id=ob.key_person_id AND ob.status_type_id = st.status_type_id AND ob.book_type = 'C' AND st.status_type = 'Issue';";
            ResultSet rst = connection.prepareStatement(query).executeQuery();
            q = q.trim();
            while (rst.next()) {
                String officer_name = rst.getString("key_person_name");
                if(officer_name.toUpperCase().startsWith(q.toUpperCase())){
                    officer_name_list.add(officer_name);
                    count++;
                }
            }
            if(count == 0)
                officer_name_list.add("Officer Name not found");
        } catch (Exception e) {
        }
        return officer_name_list;
    }

     public String getOfficerName(String book_no) {
        String officer_name = "";
        int count = 0;
        try {
            String query = " select ob.book_no ,kp.key_person_name from officer_book as ob,key_person as kp, status_type AS st "
                    + "WHERE kp.key_person_id=ob.key_person_id AND ob.status_type_id = st.status_type_id AND ob.book_type = 'C' "
                    + " AND st.status_type = 'Issue' AND ob.book_no = " + book_no + " AND ob.active='Y'";
            ResultSet rst = connection.prepareStatement(query).executeQuery();
            //q = q.trim();
            while (rst.next()) {
                 officer_name = rst.getString("key_person_name");                
            }            
        } catch (Exception e) {
        }
        return officer_name;
    }

    public List<String> getOfficerBooklist(String q, String officer_name) {
        //String book_no_list = "";
        if(officer_name == null)
            officer_name = "";
        List<String> book_no_list = new ArrayList<String>();
        try {
            String query = "SELECT ob.book_no from officer_book as ob ,key_person as kp, status_type AS st, traffic_police AS tp "
                    + " WHERE active='Y' AND ob.key_person_id  =kp.key_person_id "
                    + " AND ob.status_type_id = st.status_type_id AND ob.book_type = 'C' "
                    + " AND st.status_type = 'Issue' AND ob.book_no = tp.book_no "
                    + " AND IF('" + officer_name + "'='', key_person_name LIKE '%%' , key_person_name= ?)"
                    + " GROUP BY ob.book_no";
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, officer_name);
            ResultSet rset = pstmt.executeQuery();
            q = q.trim();
            while (rset.next()) {
                String book_no = rset.getString("book_no");
                if(book_no.startsWith(q))
                    book_no_list.add(book_no);
            }
        } catch (Exception e) {
        }
        return book_no_list;
    }

    public List<String> getChallanNo(String q, String book_no){
        List<String> challan_no = new ArrayList<String>();
        String query = "SELECT reciept_no FROM traffic_police WHERE book_no = " + book_no;
        try{
            ResultSet rs = connection.prepareStatement(query).executeQuery();
            q = q.trim();
            while(rs.next()){
                String  ch_no = rs.getString("reciept_no");
                if (ch_no.startsWith(q)) 
                    challan_no.add(ch_no);                
            }
        }catch(Exception ex){
            System.out.print("ERROR : in getChallanNo() in receiptBookModel : " + ex);
        }
        return challan_no;
    }

    public String getTrafficPoliceIDAmount(String book_no, String challan_no){
        String amount = "";
        String query = "SELECT traffic_police_id, deposited_amount FROM traffic_police WHERE book_no = " + book_no + " AND reciept_no= " + challan_no;
        try{
            ResultSet rs = connection.prepareStatement(query).executeQuery();
            if(rs.next())
                amount = rs.getString(1) +"_"+ rs.getString(2);
        }catch(Exception ex){
            System.out.println("ERROR : in getChallanAmount() in ReceiptBookModel : " + ex);
        }
        return amount;
    }

    public List<String> getReceiptBookNo(String q, String officer_name) {
        //String book_no_list = "";
        List<String> book_no_list = new ArrayList<String>();
        try {
            String query = "SELECT ob.book_no from officer_book as ob ,key_person as kp, status_type AS st "
                    + " WHERE active='Y' AND ob.key_person_id = kp.key_person_id "
                    + " AND ob.status_type_id = st.status_type_id AND ob.book_type = 'R' AND st.status_type = 'Issue' "
                    + " AND IF('" + officer_name + "'='', key_person_name LIKE '%%' , key_person_name= ?)";
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, officer_name);
            ResultSet rset = pstmt.executeQuery();
            q = q.trim();
            while (rset.next()) {
                String book_no = rset.getString("book_no");
                if(book_no.startsWith(q))
                    book_no_list.add(book_no);
            }
        } catch (Exception e) {
            System.out.println("Error: in getReceiptBookNo() in ReceiptBookModel : " + e);
        }
        return book_no_list;
    }

    public int getReceiptBookRevision(String book_no){
        int revision = 0;
        String query = "SELECT book_revision_no FROM officer_book WHERE active = 'Y' AND book_no=" + book_no;
        try{
            ResultSet rs = connection.prepareStatement(query).executeQuery();
            if(rs.next())
                revision = rs.getInt("book_revision_no");
        }catch(Exception ex){
            System.out.println("Error : in getReceiptBookRevision() in ReceiptBookModel : " + ex);
        }
        return revision;
    }

    public int getReceiptNo(String q, String receipt_book_no) {
        List<String> book_no_list = new ArrayList<String>();
        int from_no = 0 ;
        int to_no = 0;
        int page_no = 0;
        boolean result = false;
        try {
            String query = "SELECT ob.from_no, ob.to_no from officer_book as ob ,key_person as kp, status_type AS st "
                    + " WHERE active='Y' AND ob.key_person_id = kp.key_person_id "
                    + " AND ob.status_type_id = st.status_type_id AND ob.book_type = 'R' AND st.status_type = 'Issue' "
                    + " AND ob.book_no= ?";
            String receiptQuery = "SELECT MAX(page_no) FROM receipt_book WHERE receipt_book_no = " + receipt_book_no;
            PreparedStatement pstmt = connection.prepareStatement(query);
            PreparedStatement receiptPst = connection.prepareStatement(receiptQuery);
            pstmt.setString(1, receipt_book_no);
            ResultSet rset = pstmt.executeQuery();
            q = q.trim();
            while (rset.next()) {
                from_no = rset.getInt("from_no");
                to_no = rset.getInt("to_no");
            }
            rset = receiptPst.executeQuery();
            if(rset.next()){
                page_no = rset.getInt(1);
                //page_no++;
                if(page_no >= from_no && page_no < to_no)
                    page_no++;
                if(page_no < from_no)
                    page_no = from_no;
                    //result = true;
            }
        } catch (Exception e) {
            System.out.println("Error: in getReceiptBookNo() in ReceiptBookModel : " + e);
        }
        return page_no;
    }

    public List<String> getReceiptNoSearchList(String q, String receipt_book_no) {
        List<String> page_no_list = new ArrayList<String>();       
        String page_no = "";
        boolean result = false;
        int count = 0;
        try {
            String query = "SELECT page_no from receipt_book as rb "
                    + " WHERE rb.receipt_book_no= ?";           
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, receipt_book_no);
            ResultSet rset = pstmt.executeQuery();
            q = q.trim();
            while (rset.next()) {
                page_no = rset.getString("page_no");
                if(page_no.startsWith(q)){
                    page_no_list.add(page_no);
                    count++;
                }
            }
            if(count == 0)
                page_no_list.add("No Receipt No. Found! ");
        } catch (Exception e) {
            System.out.println("Error: in getReceiptNoSearchList() in ReceiptBookModel : " + e);
        }
        return page_no_list;
    }

    public int getCity_location_id(String city_name, String zone_name, String location) {
        int city_location_id = 0;
        try {

            String query = "select city_location_id from city_location as cl,city as c,zone_new as z "
                    + "where c.city_id=z.city_id and z.zone_new_id=cl.zone_new_id "
                    + "and  c.city_name=? and z.zone=? and cl.location=? ";

            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, city_name);
            pstmt.setString(2, zone_name);
            pstmt.setString(3, location);
            ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                city_location_id = rset.getInt("city_location_id");

            }
        } catch (Exception e) {
        }
        return city_location_id;
    }

    public List<String> getCityName(String q) {
        List<String> list = new ArrayList<String>();
        String query = "select c.city_name from city_location as cl,city as c,zone_new as z where c.city_id=z.city_id "
                + "and z.zone_new_id=cl.zone_new_id GROUP BY c.city_name";
        try {
            ResultSet rset = connection.prepareStatement(query).executeQuery();
            int count = 0;
            q = q.trim();
            while (rset.next()) {    // move cursor from BOR to valid record.
                String city_name = rset.getString("city_name");
                if (city_name.toUpperCase().startsWith(q.toUpperCase())) {
                    list.add(city_name);
                    count++;
                }
            }
            if (count == 0)
                list.add("No such City exists.......");
        } catch (Exception e) {
            System.out.println("getCityName ERROR inside TrafficPoliceModel - " + e);
        }
        return list;
    }

    public List<String> getZoneName(String q, String city_name) {
        List<String> list = new ArrayList<String>();
        String query = "select z.zone from city_location as cl,city as c,zone_new as z where c.city_id=z.city_id and z.zone_new_id=cl.zone_new_id "
                + "and c.city_name='" + city_name + "' group by z.zone";
        try {
            PreparedStatement pstsmt = connection.prepareStatement(query);
            ResultSet rs = pstsmt.executeQuery();
            int count = 0;
            q = q.trim();
            while (rs.next()) {
                String zone = rs.getString("zone");
                if (zone.toUpperCase().startsWith(q.toUpperCase())) {
                    list.add(zone);
                    count++;
                }
            }
            if (count == 0) {
                list.add("No such Zone exists.");
            }

        } catch (Exception e) {
            System.out.println("Error inside getZoneName " + e);
        }
        return list;
    }

    public List<String> getLocationName(String q, String zone_name) {
        List<String> list = new ArrayList<String>();
        String query = "select cl.location from city_location as cl,zone_new as z where z.zone_new_id=cl.zone_new_id "
                + "and z.zone='" + zone_name + "' group by cl.location";
        try {
            PreparedStatement pstsmt = connection.prepareStatement(query);
            ResultSet rs = pstsmt.executeQuery();
            int count = 0;
            q = q.trim();
            while (rs.next()) {
                String location = rs.getString("location");
                if (location.toUpperCase().startsWith(q.toUpperCase())) {
                    list.add(location);
                    count++;
                }
            }
            if (count == 0) {
                list.add("No such Location exists.");
            }
        } catch (Exception e) {
            System.out.println("Error inside getLocationName " + e);
        }
        return list;
    }

    public List<String> getVehicleNoSearchList(String q) {
        List<String> list = new ArrayList<String>();

        String query = "SELECT  vehicle_no from traffic_police WHERE vehicle_no IS NOT NULL"
                + " GROUP BY vehicle_no"
                + " ORDER BY vehicle_no ";
        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            // pstmt.setString(1,vehicle_type);

            ResultSet rs = pstmt.executeQuery();
            int count = 0;
            q = q.trim();
            while (rs.next()) {
                String vehicle_no = rs.getString("vehicle_no");
                if (vehicle_no.toUpperCase().startsWith(q.toUpperCase())) {
                    list.add(vehicle_no);
                    count++;
                }
                //list.add(vehicle_no);
                //count++;
            }

            if (count == 0) {
                //list.add("No vehicle Number is exist");
            }
        } catch (Exception e) {
            System.out.println(" getActSearchList ERROR inside TrafficPoliceModel - " + e);
        }
        return list;
    }

    public JSONObject getVehicleNoJsonList() {
        JSONObject json = new JSONObject();
        String query = "SELECT  vehicle_no, traffic_police_id from traffic_police WHERE vehicle_no IS NOT NULL"
                + " GROUP BY vehicle_no"
                + " ORDER BY vehicle_no ";
        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            ResultSet rs = pstmt.executeQuery();
            int count = 0;
            
            while (rs.next()) {
                int tp_id = rs.getInt("traffic_police_id");
                String vehicle_no = rs.getString("vehicle_no");
                json.put(tp_id, vehicle_no);
            }

            if (count == 0) {
                //list.add("No vehicle Number is exist");
            }
        } catch (Exception e) {
            System.out.println(" getActSearchList ERROR inside TrafficPoliceModel - " + e);
        }
        return json;
    }

    public List<String> getOffenceCodeList(String q) {
        List<String> list = new ArrayList<String>();

        String query = "SELECT  ot.offence_code from offence_type ot "//, traffic_offence_map tom, traffic_police as tp " //vehicle_type as vt,
                //+ " WHERE tom.traffic_police_id = tp. traffic_police_id AND ot.offence_type_id=tom.offence_type_id "
                + " GROUP BY offence_code"
                + " ORDER BY offence_code ";


        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            // pstmt.setString(1,vehicle_type);

            ResultSet rs = pstmt.executeQuery();
            int count = 0;
            q = q.trim();
            while (rs.next()) {
                String offence_code = rs.getString("offence_code");
                if(offence_code.startsWith(q)){
                    list.add(offence_code);
                    count++;
                }
            }

            if (count == 0) {
                list.add("Offence Code is not exist");
            }
        } catch (Exception e) {
            System.out.println(" getOffenceCodeList ERROR inside TrafficPoliceSearchModel - " + e);
        }
        return list;
    }

    public double getPenaltyAmount(String offence_code){
        double penalty_amount = 0.0;
        String query = "SELECT penalty_amount FROM offence_type WHERE offence_code='" + offence_code + "'";
        try{
            ResultSet rs = connection.prepareStatement(query).executeQuery();
            if(rs.next())
                penalty_amount = rs.getDouble("penalty_amount");
        }catch(Exception ex){
            System.out.println("ERROR: getPenaltyAmount in TrafficPoliceSearchModel : " + ex);
        }
        return penalty_amount;
    }



    public void closeConnection() {
        try {
            connection.close();
        } catch (Exception e) {
            System.out.println("keypersonModel closeConnection() Error: " + e);
        }
    }

    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }

    public String getConnectionString() {
        return connectionString;
    }

    public void setConnectionString(String connectionString) {
        this.connectionString = connectionString;
    }

    public String getDb_userName() {
        return db_userName;
    }

    public void setDb_userName(String db_userName) {
        this.db_userName = db_userName;
    }

    public String getDb_userPasswrod() {
        return db_password;
    }

    public void setDb_userPasswrod(String db_password) {
        this.db_password = db_password;
    }

    public String getDriverClass() {
        return driverClass;
    }

    public void setDriverClass(String driverClass) {
        this.driverClass = driverClass;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getMsgBgColor() {
        return msgBgColor;
    }

    public void setMsgBgColor(String msgBgColor) {
        this.msgBgColor = msgBgColor;
    }

}
