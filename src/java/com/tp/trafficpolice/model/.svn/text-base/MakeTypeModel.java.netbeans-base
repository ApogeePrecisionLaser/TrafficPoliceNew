/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.tp.trafficpolice.model;

import com.lowagie.text.Font;
import com.mysql.jdbc.Connection;

import com.tp.tableClasses.MakeTypeBean;
import com.tp.util.KrutiDevToUnicodeConverter;
import com.tp.util.UnicodeToKrutiDevConverter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import jxl.Sheet;
import jxl.Workbook;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRXlsExporter;

/**
 *
 * @author Administrator
 */
public class MakeTypeModel {

    private Connection connection;
    private String driverClass;
    private String connectionString;
    private String db_username;
    private String db_password;
    private String message;
    private String msgBgColor;
    private int traffic_police_id = 0;
    private String act = "";
    Map<String, String> offencMap = new HashMap<String, String>();
    private KrutiDevToUnicodeConverter krutiToUnicode = new KrutiDevToUnicodeConverter();
    private UnicodeToKrutiDevConverter unicodeToKruti = new UnicodeToKrutiDevConverter();

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getMsgBgColor() {
        return msgBgColor;
    }

    public void setMsgBgColor(String msgBgColor) {
        this.msgBgColor = msgBgColor;
    }
    private final String COLOR_OK = "yellow";
    private final String COLOR_ERROR = "red";

    public void setConnection() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = (Connection) DriverManager.getConnection(connectionString + "?useUnicode=true&characterEncoding=UTF-8&character_set_results=utf8", db_username, db_password);
            System.out.println("connected - " + connection);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public byte[] generateRecordList(String jrxmlFilePath, List list) {
        byte[] reportInbytes = null;
        HashMap mymap = new HashMap();
        try {
            JRBeanCollectionDataSource jrBean = new JRBeanCollectionDataSource(list);
            JasperReport compiledReport = JasperCompileManager.compileReport(jrxmlFilePath);
            reportInbytes = JasperRunManager.runReportToPdf(compiledReport, null, jrBean);
        } catch (Exception e) {
            System.out.println("OfficerBookModel generatReport() JRException: " + e);
        }
        return reportInbytes;
    }

    public ByteArrayOutputStream generateExcelList(String jrxmlFilePath, List list) {
        ByteArrayOutputStream reportInbytes = new ByteArrayOutputStream();
        HashMap mymap = new HashMap();
        try {
            JRBeanCollectionDataSource jrBean = new JRBeanCollectionDataSource(list);
            JasperReport compiledReport = JasperCompileManager.compileReport(jrxmlFilePath);
            //reportInbytes = JasperRunManager.runReportToPdf(compiledReport, null, jrBean);
            JasperPrint jasperPrint = JasperFillManager.fillReport(compiledReport, null, jrBean);
            JRXlsExporter exporter = new JRXlsExporter();
            exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
            exporter.setParameter(JRExporterParameter.OUTPUT_STREAM, reportInbytes);
            exporter.exportReport();
        } catch (Exception e) {
            System.out.println("OfficerBookModel generatReport() JRException: " + e);
        }
        return reportInbytes;
    }

    public int deleteRecord(int make_id) {
        String query = " DELETE FROM make WHERE make_id = " + make_id;
        int rowsAffected = 0;
        try {
            rowsAffected = connection.prepareStatement(query).executeUpdate();
        } catch (Exception e) {
            System.out.println("makeType Model deleteRecord() Error: " + e);
        }
        if (rowsAffected > 0) {

            message = "Record deleted successfully......";
            msgBgColor = COLOR_OK;
        } else {
            message = "Cannot delete the record, it is used in another GUI.";
            msgBgColor = COLOR_ERROR;
        }
        return rowsAffected;
    }

    public int updateRecord(MakeTypeBean makeTypeBean) {
        String query = " UPDATE make SET  make=?, remark=? WHERE make_id = ? ";
        int rowsAffected = 0;
        try {
            PreparedStatement pstmt = (PreparedStatement) connection.prepareStatement(query);

            pstmt.setString(1, krutiToUnicode.convert_to_unicode(makeTypeBean.getMake()));
            pstmt.setString(2, krutiToUnicode.convert_to_unicode(makeTypeBean.getRemark()));
            pstmt.setInt(3, makeTypeBean.getMake_id());
            rowsAffected = pstmt.executeUpdate();
        } catch (Exception e) {
            System.out.println("AreaModel updateRecord() Error: " + e);
        }
        if (rowsAffected > 0) {
            message = "Record updated successfully......";
            msgBgColor = COLOR_OK;
        } else {
            message = "Cannot update the record, some error......";
            msgBgColor = COLOR_ERROR;
        }
        return rowsAffected;
    }

    public int insertRecord(MakeTypeBean MakeTypeBean) {
        int rowsAffected = 0;
        String query = "INSERT INTO make (make, remark) VALUES (?,?) ";

        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, krutiToUnicode.convert_to_unicode(MakeTypeBean.getMake()));
            pstmt.setString(2, krutiToUnicode.convert_to_unicode(MakeTypeBean.getRemark()));
            rowsAffected = pstmt.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error: payment inserting: " + e);
        }
        if (rowsAffected > 0) {
            message = "Record saved successfully......";
            msgBgColor = COLOR_OK;
            System.out.println("inserted");
        } else {
            message = "Record Not saved successfully......";
            msgBgColor = COLOR_OK;
            System.out.println("not inserted");
        }
        return rowsAffected;
    }

    public List<MakeTypeBean> showData(int lowerLimit, int noOfRowsToDisplay, String searchmakeType) {
        List<MakeTypeBean> list = new ArrayList<MakeTypeBean>();

        String query = "SELECT make_id, make, remark "
                + " FROM make  "
                + " WHERE IF('" + searchmakeType + "' = '', make LIKE '%%', make =?) "
                + " order  by make "
                + " LIMIT " + lowerLimit + ", " + noOfRowsToDisplay;
        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, searchmakeType);
            ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                MakeTypeBean makeType = new MakeTypeBean();
                makeType.setMake_id(rset.getInt("make_id"));
                makeType.setMake(rset.getString("make"));
                makeType.setRemark(rset.getString("remark"));
                list.add(makeType);
            }
        } catch (Exception e) {
            System.out.println("Error in ShowData()....: " + e);
        }
        return list;
    }

    public List<MakeTypeBean> showAllData() {
        List<MakeTypeBean> list = new ArrayList<MakeTypeBean>();

        String query = " SELECT make_id, make, remark "
                + " FROM make ";
        //+ " WHERE IF('" + searchmakeType + "' = '', make LIKE '%%', make =?) "
        //+ " LIMIT " + lowerLimit + ", " + noOfRowsToDisplay;
        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            //pstmt.setString(1, searchmakeType);
            ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                MakeTypeBean makeType = new MakeTypeBean();
                makeType.setMake_id(rset.getInt("make_id"));
                makeType.setMake(rset.getString("make"));
                makeType.setRemark(rset.getString("remark"));
                list.add(makeType);
            }
        } catch (Exception e) {
            System.out.println("Error in ShowData()....: " + e);
        }
        return list;
    }

    public int getNoOfRows(String searchmakeType) {
        String query = " SELECT Count(*) "
                + " FROM make "
                + " WHERE IF('" + searchmakeType + "' = '', make LIKE '%%',make =?) "
                + " ORDER BY make ";
        int noOfRows = 0;
        try {
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, searchmakeType);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            noOfRows = Integer.parseInt(rs.getString(1));
        } catch (Exception e) {
            System.out.println("Error inside getNoOfRows State type model" + e);
        }
        System.out.println("No of Rows in Table for search is****....." + noOfRows);
        return noOfRows;
    }

    public List<String> getmakeType(String q) {
        List<String> list = new ArrayList<String>();
        String query = " SELECT make_id, make FROM make GROUP BY make ORDER BY make";
        try {
            ResultSet rset = connection.prepareStatement(query).executeQuery();
            int count = 0;
            q = q.trim();
            while (rset.next()) {    // move cursor from BOR to valid record.
                String make = rset.getString("make");
                if (make.toUpperCase().startsWith(q.toUpperCase())) {
                    list.add(make);
                    count++;
                }
            }
            if (count == 0) {
                list.add("No such Status exists.......");
            }
        } catch (Exception e) {
            System.out.println("getmakeType ERROR inside StausTypeModel - " + e);
        }
        return list;
    }

    public void extractActFile(){
        File file = new File("E:\\project data\\T.P\\excel_act.xls");
        if (file.exists()) {
                try {
                    Workbook workbook = Workbook.getWorkbook(file);
                    Sheet sheet = workbook.getSheet(0);

                    int rowNo = 2;
                    String checkContent =new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8");

                    while (!checkContent.equals("")) {
                        MakeTypeBean data = new MakeTypeBean();
                        while (new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8") == null|| new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").isEmpty()) {
                            rowNo++;
                        }
                        ///String act = new String( sheet.getCell("B" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8") == null || new String( sheet.getCell("B" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").isEmpty() ? "" :new String( sheet.getCell("B" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").trim();
                        String act = sheet.getCell("A" + rowNo).getContents().trim() == null ||  sheet.getCell("A" + rowNo).getContents().trim().isEmpty() ? "" : sheet.getCell("A" + rowNo).getContents().trim();
                        String offence = sheet.getCell("C" + rowNo).getContents() == null || sheet.getCell("C" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("C" + rowNo).getContents().trim();
                        offencMap.put(act, offence );
                        ///insertExcelRecord(data);
                            rowNo++;
                        checkContent =new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8") == null || new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").isEmpty() ? "" : sheet.getCell("A" + rowNo).getContents().trim();
                    }

                    workbook.close();
                } catch (Exception e) {
                    System.out.println("EXception in extracting Act.xls :" + e);
                    e.printStackTrace();
                }
            }
    }

    public List<MakeTypeBean> getUploadedExcelData() {
        List<MakeTypeBean> dataList = new ArrayList<MakeTypeBean>();
        int rowAffected  = 0;
        String query = "SELECT traffic_police_id, jrayam_no, act, model_type, deposited_amount FROM traffic_police;";
        int count = 0;
        try {
            extractActFile();
            //File file = new File("E:\\project data\\T.P\\yatayat1.xls");
            
            // Cell a1 = sheet.getCell("D11");
            //(Column,Row);
            connection.setAutoCommit(false);
            //if (file.exists()) {
                try {
                    ResultSet rs = connection.prepareStatement(query).executeQuery();
                    /*Workbook workbook = Workbook.getWorkbook(file);
                    Sheet[] sheet1 = workbook.getSheets();
                    //Sheet sheet = workbook.getSheet(0);
                    for(int s = 0; s < sheet1.length; s++){
                        Sheet sheet = sheet1[s];
                    int rowNo = 2;
                    String checkContent =new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8");
*/
                    //while (!checkContent.equals("")) {
                    while(rs.next()){
                        MakeTypeBean data = new MakeTypeBean();
                        count++;
                        /*while (new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8") == null|| new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").isEmpty()) {
                            rowNo++;
                        }
                        data.setJrayam_no(new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8") == null || new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").isEmpty() ? "" :new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").trim());
                        data.setOffence_place(sheet.getCell("B" + rowNo).getContents() == null || sheet.getCell("B" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("B" + rowNo).getContents().trim());
                        data.setAct(new String( sheet.getCell("C" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8") == null || new String(sheet.getCell("C" + rowNo).getContents().getBytes("UTF8"),"UTF8").trim().isEmpty() ? "" : new String(sheet.getCell("C" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").trim());
                        data.setVehicle_type(sheet.getCell("D" + rowNo).getContents() == null || sheet.getCell("D" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("D" + rowNo).getContents().trim());
                        data.setVehicle_no(sheet.getCell("E" + rowNo).getContents() == null || sheet.getCell("E" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("E" + rowNo).getContents().trim());
                        data.setKey_person_name(sheet.getCell("F" + rowNo).getContents() == null || sheet.getCell("F" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("F" + rowNo).getContents().trim());
                        data.setPenalty_amount(sheet.getCell("G" + rowNo).getContents() == null || sheet.getCell("G" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("G" + rowNo).getContents().trim());
                        data.setOffence_date(sheet.getCell("H" + rowNo).getContents() == null || sheet.getCell("H" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("H" + rowNo).getContents().trim());
                        data.setProcess_type(new String(sheet.getCell("J" + rowNo).getContents().getBytes("UTF8"),"UTF8") == null || new String(sheet.getCell("J" + rowNo).getContents().getBytes("UTF8"),"UTF8").isEmpty() ? "" : new String(sheet.getCell("J" + rowNo).getContents().getBytes("UTF8"),"UTF8").trim());
                        data.setOffender_address(new String(sheet.getCell("K" + rowNo).getContents() .trim().getBytes("UTF8"),"UTF8")== null ||new String(sheet.getCell("K" + rowNo).getContents() .trim().getBytes("UTF8"),"UTF8").isEmpty() ? "" : new String(sheet.getCell("K" + rowNo).getContents() .trim().getBytes("UTF8"),"UTF8").trim());
                        data.setCase_no(sheet.getCell("L" + rowNo).getContents() == null || sheet.getCell("L" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("L" + rowNo).getContents().trim());
                        data.setCase_date(sheet.getCell("M" + rowNo).getContents() == null || sheet.getCell("M" + rowNo).getContents().isEmpty() ? "" : sheet.getCell("M" + rowNo).getContents().trim());
*/
                        traffic_police_id = rs.getInt("traffic_police_id");
                        data.setJrayam_no(rs.getString("jrayam_no"));
                        data.setAct(rs.getString("act"));
                        data.setVehicle_type(rs.getString("model_type"));
                        data.setPenalty_amount(rs.getString("deposited_amount"));
                        dataList.add(data);
                        //Set set = offencMap.entrySet();
                        String offence = offencMap.get(data.getAct());
                        if(data.getAct().isEmpty()){
                            System.out.println(count + " ..........Act not found :" + data.getJrayam_no());
                            offence = "175";
                        }
                        else {
                        //String offence = offencMap.get(data.getAct());
                        if(offence == null){
                            System.out.println(count + " ..........Offence Act " + data.getAct() + "not found of this jrayam no.  :" + data.getJrayam_no());
                            offence = "175";// ..Not Specified...
                        }
                        }
                        //Iterator itr = set.iterator();
                        //while(itr.hasNext()){
                            //Map.Entry entry = (Map.Entry)itr.next();
                            //String act = entry.getKey().toString();
                            if(offence != null && !offence.isEmpty()){
                                rowAffected = 1; //insertExcelRecord(data);
                                if(rowAffected > 0){
                                    //getTempTrafficId();
                                    //String offence = entry.getValue().toString();
                                    String[] offenceArray = offence.split(",");
                                    for(int i = 0; i < offenceArray.length;i++){
                                        if((offenceArray[i] != null || !offenceArray[i].isEmpty()) && traffic_police_id > 0){
                                            int offenceId = Integer.parseInt(offenceArray[i].trim());
                                            int id = getOffenceTypeId(offenceId, data.getVehicle_type(), data.getPenalty_amount());
                                            if(id != 0)
                                                rowAffected = insertTempTrafficOffenceRecord(traffic_police_id, id);
                                            else
                                                rowAffected = insertTempTrafficOffenceRecord(traffic_police_id, offenceId);
                                        }
                                    }
                                     if(rowAffected > 0)
                                        connection.commit();
                                        else{
                                                connection.rollback();
                                                System.out.println("Record Not inserted :" + data.getJrayam_no());
                                            }
                                    traffic_police_id = 0;
                                    //break;
                                }else{
                                    connection.rollback();
                                    System.out.println("Record Not inserted :" + data.getJrayam_no());
                                }
                            }else{
                                System.out.println("Record Not inserted :" + data.getJrayam_no());
                            }
                        //}
                        /*if(data.getJrayam_no().equals("26191"))
                            System.out.println("Jarayam no. " + data.getJrayam_no());
                            rowNo++;
                        try{
                            checkContent =new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8") == null || new String( sheet.getCell("A" + rowNo).getContents().trim().getBytes("UTF8"),"UTF8").isEmpty() ? "" : sheet.getCell("A" + rowNo).getContents().trim();
                        } catch(Exception ex){
                            System.out.println("EXception is :" + ex);
                            checkContent = "";
                        }*/
                    }
                    //System.out.println("................End sheet " + sheet.getName() + "............");
                //}
                   
                    //workbook.close();
                } catch (Exception e) {
                    System.out.println("EXception is :" + e);
                    e.printStackTrace();
                }
            //}
        } catch (Exception e) {
            System.out.println("MeterModel getUploadedmailBean exception : " + e);
        }
        return dataList;
    }
 public int insertExcelRecord(MakeTypeBean makeTypeBean) {
        int rowsAffected = 0;
        String query = "INSERT INTO temp_traffic (jrayam_no,location,act,model_type,vehicle_no,key_person_name,"
                + "penalty_amount,offence_date,process_type,case_no,case_date,offender_address) VALUES (?,?,?,?,?,?,?,?,?,?,?,?) ";

        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setString(1, makeTypeBean.getJrayam_no());
            pstmt.setString(2, makeTypeBean.getOffence_place());
            pstmt.setString(3, makeTypeBean.getAct());
            pstmt.setString(4,makeTypeBean.getVehicle_type());
            pstmt.setString(5,makeTypeBean.getVehicle_no());
             pstmt.setString(6, makeTypeBean.getKey_person_name());
            pstmt.setString(7, makeTypeBean.getPenalty_amount());
            pstmt.setString(8, makeTypeBean.getOffence_date());
            pstmt.setString(9,makeTypeBean.getProcess_type());
            pstmt.setString(10,makeTypeBean.getCase_no());
             pstmt.setString(11,makeTypeBean.getCase_date());
              pstmt.setString(12,makeTypeBean.getOffender_address());
            rowsAffected = pstmt.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error: payment inserting: " + e);
        }
        if (rowsAffected > 0) {
            message = "Record saved successfully......";
            msgBgColor = COLOR_OK;
            System.out.println("inserted");
        } else {
            message = "Record Not saved successfully......";
            msgBgColor = COLOR_OK;
            System.out.println("not inserted");
        }
        return rowsAffected;
    }

 public int getTempTrafficId(){
     int traffic_id = 0;
     traffic_police_id = 0;
     String query = "SELECT MAX(temp_traffic_id) FROM temp_traffic";
     try{
         ResultSet rs = connection.prepareStatement(query).executeQuery();
         if(rs.next()){
             traffic_police_id = rs.getInt(1);
         }
     }catch(Exception ex){
         System.out.println("Error: in getTempTrafficId() of MakeTypeModel : " + ex);
     }
     return traffic_police_id;
 }

 public int getOffenceTypeId(int offenceId, String vehicle_type, String penalty_amount){
     int ofnc_id = 0;
     double pnlty_amount = 0.0;
     try{
         pnlty_amount = Double.parseDouble(penalty_amount);
     }catch(Exception ex){
         pnlty_amount = 0.0;
     }
     String query = "SELECT offence_type_id FROM offence_type tot, model m, vehicle_model_map vmp, vehicle_type vt "
             + " WHERE IF(tot.vehicle_type_id=vt.vehicle_type_id, tot.vehicle_type_id = vt.vehicle_type_id, tot.vehicle_type_id = 20) AND vt.vehicle_type_id = vmp.vehicle_type_id AND vmp.model_id=m.model_id  "
             + " AND tot.offence_type = (SELECT offence_type FROM offence_type where offence_type_id = " + offenceId + ") "
             + " AND IF('" + vehicle_type + "'='', m.model LIKE '%%', m.model = '" + vehicle_type + "' ) "
             + " AND IF('" + pnlty_amount + "'='0.0' OR tot.penalty_amount != '" + pnlty_amount + "' , tot.penalty_amount LIKE '%%', tot.penalty_amount = '" + pnlty_amount + "' ) ";
     try{
         ResultSet rs = connection.prepareStatement(query).executeQuery();
         if(rs.next()){
             ofnc_id = rs.getInt("offence_type_id");
         }
     }catch(Exception ex){
         System.out.println("Error: in getOffenceTypeId : " + ex);
     }
     return ofnc_id;
 }

 public int insertTempTrafficOffenceRecord(int temp_traffic_id, int offenct_type_id){
     int rowsAffected = 0;
        String query = "INSERT INTO temp_traffic_offence_map (temp_traffic_id, offence_type_id) VALUES (?,?) ";

        try {
            PreparedStatement pstmt = connection.prepareStatement(query);
            pstmt.setInt(1, temp_traffic_id);
            pstmt.setInt(2, offenct_type_id);       
            rowsAffected = pstmt.executeUpdate();
        } catch (Exception e) {
            System.out.println("Error: insertTempTrafficOffenceRecord: " + e);
        }
        if (rowsAffected > 0) {
            message = "Record saved successfully......";
            msgBgColor = COLOR_OK;
            System.out.println("inserted " + temp_traffic_id + " " + offenct_type_id);
        } else {
            message = "Record Not saved successfully......";
            msgBgColor = COLOR_OK;
            System.out.println("not inserted");
        }
        return rowsAffected;
 }
    public Connection getConnection() {
        return connection;
    }

    public String getConnectionString() {
        return connectionString;
    }

    public void setConnectionString(String connectionString) {
        this.connectionString = connectionString;
    }

    public String getDb_password() {
        return db_password;
    }

    public void setDb_password(String db_password) {
        this.db_password = db_password;
    }

    public String getDb_username() {
        return db_username;
    }

    public void setDb_username(String db_username) {
        this.db_username = db_username;
    }

    public String getDriverClass() {
        return driverClass;
    }

    public void setDriverClass(String driverClass) {
        this.driverClass = driverClass;
    }

    public void closeConnection() {
        try {
            connection.close();
        } catch (Exception e) {
            System.out.println("makeTypemodel closeConnection() Error: " + e);
        }
    }
}
