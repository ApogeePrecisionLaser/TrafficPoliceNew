/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.tp.trafficpolice.controller;

import com.tp.tableClasses.ModelTypeBean;
import com.tp.trafficpolice.model.VehicleModelMapModel;
import com.tp.util.UniqueIDGenerator;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.List;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 *
 * @author jpss
 */
public class VehicleModelMapController extends HttpServlet {
   
    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        int lowerLimit = 0, noOfRowsTraversed = 0, noOfRowsToDisplay = 10, noOfRowsInTable;
        System.out.println("this is VehicleModelMapController Controller....");
        ServletContext ctx = getServletContext();
        VehicleModelMapModel vehicleModelMapModel = new VehicleModelMapModel();
        vehicleModelMapModel.setDriverClass(ctx.getInitParameter("driverClass"));
        vehicleModelMapModel.setDb_username(ctx.getInitParameter("db_userName"));
        vehicleModelMapModel.setDb_password(ctx.getInitParameter("db_userPasswrod"));
        vehicleModelMapModel.setConnectionString(ctx.getInitParameter("connectionString"));
        vehicleModelMapModel.setConnection();
        request.setCharacterEncoding("UTF-8");
        response.setHeader("Content-Type", "text/plain; charset=UTF-8");

        String task = request.getParameter("task");
        String vehicleType = request.getParameter("vehicleType");

        try {
            //----- This is only for Vendor key Person JQuery
            String JQstring = request.getParameter("action1");
            String q = request.getParameter("q");   // field own input
            if (JQstring != null) {
                PrintWriter out = response.getWriter();
                List<String> list = null;
                if (JQstring.equals("getStatusType")) {
                    list = vehicleModelMapModel.getmodelType(q);
                } else if (JQstring.equals("getMakeType")) {
                    list = vehicleModelMapModel.getmakeType(q);
                } else if (JQstring.equals("getVehicleType")) {
                    list = vehicleModelMapModel.getVehicleType(q);
                }
                Iterator<String> iter = list.iterator();
                while (iter.hasNext()) {
                    String data = iter.next();
                    out.println(data);
                }
                vehicleModelMapModel.closeConnection();
                return;
            }
        } catch (Exception e) {
            System.out.println("\n Error --ClientPersonMapController get JQuery Parameters Part-" + e);
        }

        if (task == null) {
            task = "";
        }
        if (task.equals("generateMapReport")) {
            String jrxmlFilePath;
            List list = null;
          vehicleType= request.getParameter("vehicleType");


            if (vehicleType == null) {
                vehicleType = "";
            }


            response.setContentType("application/pdf");
            ServletOutputStream servletOutputStream = response.getOutputStream();
            jrxmlFilePath = ctx.getRealPath("/report/vehicleModelMap.jrxml");

           
            
            list = vehicleModelMapModel.showAllData(vehicleType);
            byte[] reportInbytes = vehicleModelMapModel.generateRecordList(jrxmlFilePath, list);
            response.setContentLength(reportInbytes.length);
            servletOutputStream.write(reportInbytes, 0, reportInbytes.length);
            servletOutputStream.flush();
            servletOutputStream.close();
            vehicleModelMapModel.closeConnection();
            return;
        } else if (task.equals("generateExcelReport")) {
            String jrxmlFilePath;
            List list = null;
          vehicleType= request.getParameter("vehicleType");
            if (vehicleType == null) {
                vehicleType = "";
            }
            response.setContentType("application/vnd.ms-excel");
            response.setHeader("Content-Disposition", "attachment; filename=VehicleModelMap_report.xls");
            ServletOutputStream servletOutputStream = response.getOutputStream();
            jrxmlFilePath = ctx.getRealPath("/report/vehicleModelMap.jrxml");
            list = vehicleModelMapModel.showAllData(vehicleType);
            ByteArrayOutputStream reportInbytes = vehicleModelMapModel.generateExcelList(jrxmlFilePath, list);
            response.setContentLength(reportInbytes.size());
            servletOutputStream.write(reportInbytes.toByteArray());
            servletOutputStream.flush();
            servletOutputStream.close();
            vehicleModelMapModel.closeConnection();
            return;
        }
        if (task.equals("Delete")) {
            vehicleModelMapModel.deleteRecord(Integer.parseInt(request.getParameter("vehicle_model_map_id")));  // Pretty sure that organisation_type_id will be available.
        } else if (task.equals("Save") || task.equals("Save AS New")) {
            int vehicle_model_map_id;
            try {
                vehicle_model_map_id = Integer.parseInt(request.getParameter("vehicle_model_map_id"));
            } catch (Exception e) {
                vehicle_model_map_id = 0;
            }
            if (task.equals("Save AS New")) {
                vehicle_model_map_id = 0;
            }
            ModelTypeBean modelTypeBean = new ModelTypeBean();
            modelTypeBean.setVehicle_model_map_id(vehicle_model_map_id);
            //modelTypeBean.setMake(request.getParameter("make_type"));
            modelTypeBean.setModel(request.getParameter("model_type"));
            modelTypeBean.setVehicle_type(request.getParameter("vehicle_type"));
            modelTypeBean.setRemark(request.getParameter("remark"));
            if (vehicle_model_map_id == 0) {
                System.out.println("Inserting values by model......");
                vehicleModelMapModel.insertRecord(modelTypeBean);
            } else {
                System.out.println("Update values by model........");
                vehicleModelMapModel.updateRecord(modelTypeBean);
            }
        }


        try {
            if (vehicleType == null) {
                vehicleType = "";
            }
        } catch (Exception e) {
        }
        // Start of Search Table
        try {
            lowerLimit = Integer.parseInt(request.getParameter("lowerLimit"));
            noOfRowsTraversed = Integer.parseInt(request.getParameter("noOfRowsTraversed"));
        } catch (Exception e) {
            lowerLimit = noOfRowsTraversed = 0;
        }
        String buttonAction = request.getParameter("buttonAction"); // Holds the name of any of the four buttons: First, Previous, Next, Delete.
        if (buttonAction == null) {
            buttonAction = "none";
        }
        if (task.equals("Show All Records")) {
            vehicleType = "";
        }
        System.out.println("searching.......... " + vehicleType);
        noOfRowsInTable = vehicleModelMapModel.getNoOfRows(vehicleType);                  // get the number of records (rows) in the table.

        if (buttonAction.equals("Next")); // lowerLimit already has value such that it shows forward records, so do nothing here.
        else if (buttonAction.equals("Previous")) {
            int temp = lowerLimit - noOfRowsToDisplay - noOfRowsTraversed;
            if (temp < 0) {
                noOfRowsToDisplay = lowerLimit - noOfRowsTraversed;
                lowerLimit = 0;
            } else {
                lowerLimit = temp;
            }
        } else if (buttonAction.equals("First")) {
            lowerLimit = 0;
        } else if (buttonAction.equals("Last")) {
            lowerLimit = noOfRowsInTable - noOfRowsToDisplay;
            if (lowerLimit < 0) {
                lowerLimit = 0;
            }
        }

        if (task.equals("Save") || task.equals("Delete") || task.equals("Save AS New")) {
            lowerLimit = lowerLimit - noOfRowsTraversed;    // Here objective is to display the same view again, i.e. reset lowerLimit to its previous value.
        }

        List<ModelTypeBean> modelTypeList = vehicleModelMapModel.showData(lowerLimit, noOfRowsToDisplay, vehicleType);
        lowerLimit = lowerLimit + modelTypeList.size();
        noOfRowsTraversed = modelTypeList.size();

        if ((lowerLimit - noOfRowsTraversed) == 0) {     // if this is the only data in the table or when viewing the data 1st time.
            request.setAttribute("showFirst", "false");
            request.setAttribute("showPrevious", "false");
        }
        if (lowerLimit == noOfRowsInTable) {             // if No further data (rows) in the table.
            request.setAttribute("showNext", "false");
            request.setAttribute("showLast", "false");
        }

        request.setAttribute("modelTypeList", modelTypeList);
        request.setAttribute("lowerLimit", lowerLimit);
        request.setAttribute("noOfRowsTraversed", noOfRowsTraversed);
        request.setAttribute("vehicleType", vehicleType);
        request.setAttribute("IDGenerator", new UniqueIDGenerator());
        request.setAttribute("message", vehicleModelMapModel.getMessage());
        request.getRequestDispatcher("/vehicleModelMapView").forward(request, response);
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    } 

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
